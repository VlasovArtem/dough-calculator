// Package integration_test provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package integration_test

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BakerAmount defines model for BakerAmount.
type BakerAmount struct {
	Amount          float32  `json:"amount"`
	BakerPercentage *float32 `json:"baker_percentage,omitempty"`
	Name            *string  `json:"name,omitempty"`
}

// CreateSourdoughRecipeRequestDto defines model for CreateSourdoughRecipeRequestDto.
type CreateSourdoughRecipeRequestDto struct {
	AdditionalIngredients []BakerAmount          `json:"additional_ingredients"`
	Description           string                 `json:"description"`
	Flour                 []FlourAmount          `json:"flour"`
	Levain                SourdoughLevainAgent   `json:"levain"`
	Name                  string                 `json:"name"`
	NutritionFacts        map[string]interface{} `json:"nutrition_facts"`
	Water                 []BakerAmount          `json:"water"`
	Yield                 RecipeYield            `json:"yield"`
}

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Flour defines model for Flour.
type Flour struct {
	Description    *string             `json:"description,omitempty"`
	FlourType      *string             `json:"flourType,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	Name           *string             `json:"name,omitempty"`
	NutritionFacts *NutritionFacts     `json:"nutritionFacts,omitempty"`
}

// FlourAmount defines model for FlourAmount.
type FlourAmount struct {
	Amount float32                `json:"amount"`
	Flour  map[string]interface{} `json:"flour"`
}

// FlourResponse defines model for FlourResponse.
type FlourResponse = Flour

// NutritionFacts defines model for NutritionFacts.
type NutritionFacts struct {
	Calories *int     `json:"calories,omitempty"`
	Carbs    *float32 `json:"carbs,omitempty"`
	Fat      *float32 `json:"fat,omitempty"`
	Fiber    *float32 `json:"fiber,omitempty"`
	Protein  *float32 `json:"protein,omitempty"`
}

// RecipeYield defines model for RecipeYield.
type RecipeYield struct {
	Amount int    `json:"amount"`
	Unit   string `json:"unit"`
}

// SourdoughLevainAgent defines model for SourdoughLevainAgent.
type SourdoughLevainAgent struct {
	Amount  BakerAmount   `json:"amount"`
	Flour   []FlourAmount `json:"flour"`
	Starter BakerAmount   `json:"starter"`
	Water   BakerAmount   `json:"water"`
}

// SourdoughRecipeResponseDto defines model for SourdoughRecipeResponseDto.
type SourdoughRecipeResponseDto struct {
	AdditionalIngredients *[]BakerAmount          `json:"additional_ingredients,omitempty"`
	Description           *string                 `json:"description,omitempty"`
	Details               *map[string]interface{} `json:"details,omitempty"`
	Flour                 *[]FlourAmount          `json:"flour,omitempty"`
	Id                    *openapi_types.UUID     `json:"id,omitempty"`
	Levain                *SourdoughLevainAgent   `json:"levain,omitempty"`
	Name                  *string                 `json:"name,omitempty"`
	NutritionFacts        *map[string]interface{} `json:"nutrition_facts,omitempty"`
	Water                 *[]BakerAmount          `json:"water,omitempty"`
	Yield                 *map[string]interface{} `json:"yield,omitempty"`
}

// SourdoughRecipeScaleRequestDto defines model for SourdoughRecipeScaleRequestDto.
type SourdoughRecipeScaleRequestDto struct {
	FinalDoughWeight int `json:"final_dough_weight"`
}

// FindFloursParams defines parameters for FindFlours.
type FindFloursParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchFlourParams defines parameters for SearchFlour.
type SearchFlourParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// FindSourdoughRecipeParams defines parameters for FindSourdoughRecipe.
type FindSourdoughRecipeParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchSourdoughRecipeParams defines parameters for SearchSourdoughRecipe.
type SearchSourdoughRecipeParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateFlourJSONRequestBody defines body for CreateFlour for application/json ContentType.
type CreateFlourJSONRequestBody = Flour

// CreateSourdoughRecipeJSONRequestBody defines body for CreateSourdoughRecipe for application/json ContentType.
type CreateSourdoughRecipeJSONRequestBody = CreateSourdoughRecipeRequestDto

// ScaleSourdoughRecipeJSONRequestBody defines body for ScaleSourdoughRecipe for application/json ContentType.
type ScaleSourdoughRecipeJSONRequestBody = SourdoughRecipeScaleRequestDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFlours request
	FindFlours(ctx context.Context, params *FindFloursParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFlourWithBody request with any body
	CreateFlourWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFlour(ctx context.Context, body CreateFlourJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchFlour request
	SearchFlour(ctx context.Context, params *SearchFlourParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFlourById request
	FindFlourById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSourdoughRecipe request
	FindSourdoughRecipe(ctx context.Context, params *FindSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSourdoughRecipeWithBody request with any body
	CreateSourdoughRecipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSourdoughRecipe(ctx context.Context, body CreateSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSourdoughRecipe request
	SearchSourdoughRecipe(ctx context.Context, params *SearchSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSourdoughRecipeById request
	FindSourdoughRecipeById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaleSourdoughRecipeWithBody request with any body
	ScaleSourdoughRecipeWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScaleSourdoughRecipe(ctx context.Context, id openapi_types.UUID, body ScaleSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFlours(ctx context.Context, params *FindFloursParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFloursRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFlourWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFlourRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFlour(ctx context.Context, body CreateFlourJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFlourRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchFlour(ctx context.Context, params *SearchFlourParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchFlourRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFlourById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFlourByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSourdoughRecipe(ctx context.Context, params *FindSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSourdoughRecipeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourdoughRecipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourdoughRecipeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourdoughRecipe(ctx context.Context, body CreateSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourdoughRecipeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSourdoughRecipe(ctx context.Context, params *SearchSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSourdoughRecipeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSourdoughRecipeById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSourdoughRecipeByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleSourdoughRecipeWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleSourdoughRecipeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleSourdoughRecipe(ctx context.Context, id openapi_types.UUID, body ScaleSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleSourdoughRecipeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/actuator/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindFloursRequest generates requests for FindFlours
func NewFindFloursRequest(server string, params *FindFloursParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flour")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFlourRequest calls the generic CreateFlour builder with application/json body
func NewCreateFlourRequest(server string, body CreateFlourJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFlourRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFlourRequestWithBody generates requests for CreateFlour with any type of body
func NewCreateFlourRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flour")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchFlourRequest generates requests for SearchFlour
func NewSearchFlourRequest(server string, params *SearchFlourParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flour/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindFlourByIdRequest generates requests for FindFlourById
func NewFindFlourByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flour/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindSourdoughRecipeRequest generates requests for FindSourdoughRecipe
func NewFindSourdoughRecipeRequest(server string, params *FindSourdoughRecipeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/recipe/sourdough")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSourdoughRecipeRequest calls the generic CreateSourdoughRecipe builder with application/json body
func NewCreateSourdoughRecipeRequest(server string, body CreateSourdoughRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourdoughRecipeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourdoughRecipeRequestWithBody generates requests for CreateSourdoughRecipe with any type of body
func NewCreateSourdoughRecipeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/recipe/sourdough")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchSourdoughRecipeRequest generates requests for SearchSourdoughRecipe
func NewSearchSourdoughRecipeRequest(server string, params *SearchSourdoughRecipeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/recipe/sourdough/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindSourdoughRecipeByIdRequest generates requests for FindSourdoughRecipeById
func NewFindSourdoughRecipeByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/recipe/sourdough/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScaleSourdoughRecipeRequest calls the generic ScaleSourdoughRecipe builder with application/json body
func NewScaleSourdoughRecipeRequest(server string, id openapi_types.UUID, body ScaleSourdoughRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScaleSourdoughRecipeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewScaleSourdoughRecipeRequestWithBody generates requests for ScaleSourdoughRecipe with any type of body
func NewScaleSourdoughRecipeRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/recipe/sourdough/%s/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)

	// FindFloursWithResponse request
	FindFloursWithResponse(ctx context.Context, params *FindFloursParams, reqEditors ...RequestEditorFn) (*FindFloursResponse, error)

	// CreateFlourWithBodyWithResponse request with any body
	CreateFlourWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFlourResponse, error)

	CreateFlourWithResponse(ctx context.Context, body CreateFlourJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFlourResponse, error)

	// SearchFlourWithResponse request
	SearchFlourWithResponse(ctx context.Context, params *SearchFlourParams, reqEditors ...RequestEditorFn) (*SearchFlourResponse, error)

	// FindFlourByIdWithResponse request
	FindFlourByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*FindFlourByIdResponse, error)

	// FindSourdoughRecipeWithResponse request
	FindSourdoughRecipeWithResponse(ctx context.Context, params *FindSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*FindSourdoughRecipeResponse, error)

	// CreateSourdoughRecipeWithBodyWithResponse request with any body
	CreateSourdoughRecipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourdoughRecipeResponse, error)

	CreateSourdoughRecipeWithResponse(ctx context.Context, body CreateSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourdoughRecipeResponse, error)

	// SearchSourdoughRecipeWithResponse request
	SearchSourdoughRecipeWithResponse(ctx context.Context, params *SearchSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*SearchSourdoughRecipeResponse, error)

	// FindSourdoughRecipeByIdWithResponse request
	FindSourdoughRecipeByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*FindSourdoughRecipeByIdResponse, error)

	// ScaleSourdoughRecipeWithBodyWithResponse request with any body
	ScaleSourdoughRecipeWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleSourdoughRecipeResponse, error)

	ScaleSourdoughRecipeWithResponse(ctx context.Context, id openapi_types.UUID, body ScaleSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleSourdoughRecipeResponse, error)
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFloursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlourResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r FindFloursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFloursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFlourResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlourResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateFlourResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFlourResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchFlourResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlourResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SearchFlourResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchFlourResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFlourByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlourResponse
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r FindFlourByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFlourByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSourdoughRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SourdoughRecipeResponseDto
}

// Status returns HTTPResponse.Status
func (r FindSourdoughRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSourdoughRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourdoughRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SourdoughRecipeResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateSourdoughRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourdoughRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSourdoughRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SourdoughRecipeResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchSourdoughRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSourdoughRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSourdoughRecipeByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourdoughRecipeResponseDto
}

// Status returns HTTPResponse.Status
func (r FindSourdoughRecipeByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSourdoughRecipeByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaleSourdoughRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ScaleSourdoughRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaleSourdoughRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// FindFloursWithResponse request returning *FindFloursResponse
func (c *ClientWithResponses) FindFloursWithResponse(ctx context.Context, params *FindFloursParams, reqEditors ...RequestEditorFn) (*FindFloursResponse, error) {
	rsp, err := c.FindFlours(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFloursResponse(rsp)
}

// CreateFlourWithBodyWithResponse request with arbitrary body returning *CreateFlourResponse
func (c *ClientWithResponses) CreateFlourWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFlourResponse, error) {
	rsp, err := c.CreateFlourWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFlourResponse(rsp)
}

func (c *ClientWithResponses) CreateFlourWithResponse(ctx context.Context, body CreateFlourJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFlourResponse, error) {
	rsp, err := c.CreateFlour(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFlourResponse(rsp)
}

// SearchFlourWithResponse request returning *SearchFlourResponse
func (c *ClientWithResponses) SearchFlourWithResponse(ctx context.Context, params *SearchFlourParams, reqEditors ...RequestEditorFn) (*SearchFlourResponse, error) {
	rsp, err := c.SearchFlour(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchFlourResponse(rsp)
}

// FindFlourByIdWithResponse request returning *FindFlourByIdResponse
func (c *ClientWithResponses) FindFlourByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*FindFlourByIdResponse, error) {
	rsp, err := c.FindFlourById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFlourByIdResponse(rsp)
}

// FindSourdoughRecipeWithResponse request returning *FindSourdoughRecipeResponse
func (c *ClientWithResponses) FindSourdoughRecipeWithResponse(ctx context.Context, params *FindSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*FindSourdoughRecipeResponse, error) {
	rsp, err := c.FindSourdoughRecipe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSourdoughRecipeResponse(rsp)
}

// CreateSourdoughRecipeWithBodyWithResponse request with arbitrary body returning *CreateSourdoughRecipeResponse
func (c *ClientWithResponses) CreateSourdoughRecipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourdoughRecipeResponse, error) {
	rsp, err := c.CreateSourdoughRecipeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourdoughRecipeResponse(rsp)
}

func (c *ClientWithResponses) CreateSourdoughRecipeWithResponse(ctx context.Context, body CreateSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourdoughRecipeResponse, error) {
	rsp, err := c.CreateSourdoughRecipe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourdoughRecipeResponse(rsp)
}

// SearchSourdoughRecipeWithResponse request returning *SearchSourdoughRecipeResponse
func (c *ClientWithResponses) SearchSourdoughRecipeWithResponse(ctx context.Context, params *SearchSourdoughRecipeParams, reqEditors ...RequestEditorFn) (*SearchSourdoughRecipeResponse, error) {
	rsp, err := c.SearchSourdoughRecipe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSourdoughRecipeResponse(rsp)
}

// FindSourdoughRecipeByIdWithResponse request returning *FindSourdoughRecipeByIdResponse
func (c *ClientWithResponses) FindSourdoughRecipeByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*FindSourdoughRecipeByIdResponse, error) {
	rsp, err := c.FindSourdoughRecipeById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSourdoughRecipeByIdResponse(rsp)
}

// ScaleSourdoughRecipeWithBodyWithResponse request with arbitrary body returning *ScaleSourdoughRecipeResponse
func (c *ClientWithResponses) ScaleSourdoughRecipeWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleSourdoughRecipeResponse, error) {
	rsp, err := c.ScaleSourdoughRecipeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleSourdoughRecipeResponse(rsp)
}

func (c *ClientWithResponses) ScaleSourdoughRecipeWithResponse(ctx context.Context, id openapi_types.UUID, body ScaleSourdoughRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleSourdoughRecipeResponse, error) {
	rsp, err := c.ScaleSourdoughRecipe(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleSourdoughRecipeResponse(rsp)
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindFloursResponse parses an HTTP response from a FindFloursWithResponse call
func ParseFindFloursResponse(rsp *http.Response) (*FindFloursResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFloursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlourResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFlourResponse parses an HTTP response from a CreateFlourWithResponse call
func ParseCreateFlourResponse(rsp *http.Response) (*CreateFlourResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFlourResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlourResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchFlourResponse parses an HTTP response from a SearchFlourWithResponse call
func ParseSearchFlourResponse(rsp *http.Response) (*SearchFlourResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchFlourResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlourResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFindFlourByIdResponse parses an HTTP response from a FindFlourByIdWithResponse call
func ParseFindFlourByIdResponse(rsp *http.Response) (*FindFlourByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFlourByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlourResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFindSourdoughRecipeResponse parses an HTTP response from a FindSourdoughRecipeWithResponse call
func ParseFindSourdoughRecipeResponse(rsp *http.Response) (*FindSourdoughRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindSourdoughRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SourdoughRecipeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSourdoughRecipeResponse parses an HTTP response from a CreateSourdoughRecipeWithResponse call
func ParseCreateSourdoughRecipeResponse(rsp *http.Response) (*CreateSourdoughRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSourdoughRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SourdoughRecipeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSearchSourdoughRecipeResponse parses an HTTP response from a SearchSourdoughRecipeWithResponse call
func ParseSearchSourdoughRecipeResponse(rsp *http.Response) (*SearchSourdoughRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSourdoughRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SourdoughRecipeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindSourdoughRecipeByIdResponse parses an HTTP response from a FindSourdoughRecipeByIdWithResponse call
func ParseFindSourdoughRecipeByIdResponse(rsp *http.Response) (*FindSourdoughRecipeByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindSourdoughRecipeByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourdoughRecipeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScaleSourdoughRecipeResponse parses an HTTP response from a ScaleSourdoughRecipeWithResponse call
func ParseScaleSourdoughRecipeResponse(rsp *http.Response) (*ScaleSourdoughRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaleSourdoughRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health
	// (GET /actuator/health)
	Health(ctx echo.Context) error
	// Retrieve a list of flours
	// (GET /v1/flour)
	FindFlours(ctx echo.Context, params FindFloursParams) error
	// Creates a new flour
	// (POST /v1/flour)
	CreateFlour(ctx echo.Context) error
	// Search flour
	// (GET /v1/flour/search)
	SearchFlour(ctx echo.Context, params SearchFlourParams) error
	// Retrieve a flour by ID
	// (GET /v1/flour/{id})
	FindFlourById(ctx echo.Context, id openapi_types.UUID) error
	// Find sourdough recipe by pagination
	// (GET /v1/recipe/sourdough)
	FindSourdoughRecipe(ctx echo.Context, params FindSourdoughRecipeParams) error
	// Create a new sourdough recipe
	// (POST /v1/recipe/sourdough)
	CreateSourdoughRecipe(ctx echo.Context) error
	// Search sourdough recipe
	// (GET /v1/recipe/sourdough/search)
	SearchSourdoughRecipe(ctx echo.Context, params SearchSourdoughRecipeParams) error
	// Fetch a sourdough recipe by its uuid
	// (GET /v1/recipe/sourdough/{id})
	FindSourdoughRecipeById(ctx echo.Context, id openapi_types.UUID) error
	// Scale a sourdough recipe
	// (POST /v1/recipe/sourdough/{id}/scale)
	ScaleSourdoughRecipe(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// FindFlours converts echo context to params.
func (w *ServerInterfaceWrapper) FindFlours(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindFloursParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindFlours(ctx, params)
	return err
}

// CreateFlour converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFlour(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFlour(ctx)
	return err
}

// SearchFlour converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFlour(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlourParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchFlour(ctx, params)
	return err
}

// FindFlourById converts echo context to params.
func (w *ServerInterfaceWrapper) FindFlourById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindFlourById(ctx, id)
	return err
}

// FindSourdoughRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) FindSourdoughRecipe(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindSourdoughRecipeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindSourdoughRecipe(ctx, params)
	return err
}

// CreateSourdoughRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSourdoughRecipe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSourdoughRecipe(ctx)
	return err
}

// SearchSourdoughRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) SearchSourdoughRecipe(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchSourdoughRecipeParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchSourdoughRecipe(ctx, params)
	return err
}

// FindSourdoughRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) FindSourdoughRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindSourdoughRecipeById(ctx, id)
	return err
}

// ScaleSourdoughRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScaleSourdoughRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScaleSourdoughRecipe(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/actuator/health", wrapper.Health)
	router.GET(baseURL+"/v1/flour", wrapper.FindFlours)
	router.POST(baseURL+"/v1/flour", wrapper.CreateFlour)
	router.GET(baseURL+"/v1/flour/search", wrapper.SearchFlour)
	router.GET(baseURL+"/v1/flour/:id", wrapper.FindFlourById)
	router.GET(baseURL+"/v1/recipe/sourdough", wrapper.FindSourdoughRecipe)
	router.POST(baseURL+"/v1/recipe/sourdough", wrapper.CreateSourdoughRecipe)
	router.GET(baseURL+"/v1/recipe/sourdough/search", wrapper.SearchSourdoughRecipe)
	router.GET(baseURL+"/v1/recipe/sourdough/:id", wrapper.FindSourdoughRecipeById)
	router.POST(baseURL+"/v1/recipe/sourdough/:id/scale", wrapper.ScaleSourdoughRecipe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgK3R6Nytz4UfkvXBQtWdEOyPQxDENDSSWZHkcrxlMwI/N0HkpIsS5Sl",
	"NM4QZHuzyePx7ve7f+IDS3RRagWKDFs9MJNsoODu5wf+F+BZoStF9m+JugQkAW6Tt+u0LYGtmKqKNSDb",
	"LdjanrspARNQxHMICiledDcMoVA52+0WDOG2EggpW/3Z3HK9aOT0+gskZBX8gMAJrnSFqa7yzSUkooRL",
	"uK3A0EfSAYvTVJDQissboXKEVDQ+C4LC/fgWIWMr9k28xySuAYm7aOxaezgi39r/KZgERWkvCLi1YJnU",
	"Fc6+7NxKj18m4Y4LNaWkxeaTEz/LwWsbgX7BVEXoILrJeOKhGcB+zwnwVKBtBch0Sodn9g8n2o8P58oh",
	"+A3UjaktWouxCBg63lgWirsfETUOo6sAYw5jvRPSAyXnTTQcKpkVRL+51cCucFBmGgtObMWqSqRsEWB5",
	"kv7zhv1jtHw+lB538ysqSJssPY099huij1QJZ8ElmFIrA68f8M8DjYf+JlxqrH/Xh4UiyD3sCce1OXAp",
	"k5rT3qcOQ5xmCoq1rxfToiVqAl/WpoRDvnfrxHSwddyulKDpVuSkjsZasN4eseQRhfOk3cMQx7qIP8KE",
	"tvDPPhPu5fv7+5X6KKZNf/eZ/AIbfArEhQw3zZPSN7PqvLoZYdgLpqLlKuHy6EiYCRss7sTNPYh8E6wQ",
	"/a4zPDSMXHtIqMzdSYKk3fNGRWe/XrAFuwM0LpTY2zfLN0trvS5B8VKwFfveLS1YyWnjDI15QhUnjfEG",
	"uKSNXcuBBi2M/eS3nTLkdvEi7S5jnUBO63fL5VDDLz87j01VFBy33bPEc2MBOKttYddWML57G7fxXdt0",
	"ePm5UKmLaeNcQl4AAVpVD8xGKLutALesCTqms8yAKxQuQsKUhI9KUYiJk9dhEBKtqK7XvCylSJz98Rfj",
	"032vcH4Kt2PHIKp3/XrCrqokAWOySspthEAo4A7SKPOwOfGMV5IeZeoxC/0YG7DkdwV/l5AQpBHUMt1o",
	"uKxti3gkhaFIZ42R+wDx0+21benaBALCf7qd18UffYJ+0On2ZN553bvD1CWsYDdg/+1pL92TPkFy4kCo",
	"KX5JDHt2TMQjBfdR06L73HYzPzbAMdmMFoArt93wPaMC1J91gyxuR7P/k/hJFHtC5nH7INLddGn/sL1I",
	"R7i1TWxPrRtWDnOyS/TEWPNk4k+Xvz1+Lb3vlu+en1pnZaQ0RZmuVPpCe4PDJFpvo4uP4wGGbiCKTTO1",
	"HQ2z3mz3nxkljnwBzShJn+oe7aE2PcIsrlELfy1kWSt5LhSv39Ma9lpLJlv7kKvnaPJTL8ChDO772hjy",
	"b84Jxxgdmuy9TINNuu7RfQZHOBvJunnd+6vS72X08efMoLqTPpGByR7bc+E1dNvHZcFZZITKJQyR7lU0",
	"oGQT8WBRE2SixtFHkhObhEv/fhwse+6lYV6KnJ6g01fWiXeU0FQiFJeRR9w/ikSkI4fanoG5VbZXs62S",
	"fv1ziwGex7i1hwHvGiYqlGzFNkTlKo6lTrjcaEOr98v3S2ZBrXX0TWlfPlr+2hU7Roz0mr30fmko3nwe",
	"1aL1F+z17p8AAAD//4+bqg2hHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
