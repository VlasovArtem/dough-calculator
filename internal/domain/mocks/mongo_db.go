// Code generated by MockGen. DO NOT EDIT.
// Source: mongo_db.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mongo_db.go -package=mocks -source=mongo_db.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoDBService is a mock of MongoDBService interface.
type MockMongoDBService struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBServiceMockRecorder
}

// MockMongoDBServiceMockRecorder is the mock recorder for MockMongoDBService.
type MockMongoDBServiceMockRecorder struct {
	mock *MockMongoDBService
}

// NewMockMongoDBService creates a new mock instance.
func NewMockMongoDBService(ctrl *gomock.Controller) *MockMongoDBService {
	mock := &MockMongoDBService{ctrl: ctrl}
	mock.recorder = &MockMongoDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBService) EXPECT() *MockMongoDBServiceMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockMongoDBService) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoDBServiceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoDBService)(nil).Disconnect))
}

// GetClient mocks base method.
func (m *MockMongoDBService) GetClient() (*mongo.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*mongo.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockMongoDBServiceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockMongoDBService)(nil).GetClient))
}

// GetCollection mocks base method.
func (m *MockMongoDBService) GetCollection(databaseName, collectionName string) (*mongo.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", databaseName, collectionName)
	ret0, _ := ret[0].(*mongo.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockMongoDBServiceMockRecorder) GetCollection(databaseName, collectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockMongoDBService)(nil).GetCollection), databaseName, collectionName)
}

// GetDatabase mocks base method.
func (m *MockMongoDBService) GetDatabase(name string) (*mongo.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", name)
	ret0, _ := ret[0].(*mongo.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockMongoDBServiceMockRecorder) GetDatabase(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockMongoDBService)(nil).GetDatabase), name)
}
