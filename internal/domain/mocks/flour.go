// Code generated by MockGen. DO NOT EDIT.
// Source: flour.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/flour.go -package=mocks -source=flour.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "dough-calculator/internal/domain"
	http "net/http"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFlourRepository is a mock of FlourRepository interface.
type MockFlourRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlourRepositoryMockRecorder
}

// MockFlourRepositoryMockRecorder is the mock recorder for MockFlourRepository.
type MockFlourRepositoryMockRecorder struct {
	mock *MockFlourRepository
}

// NewMockFlourRepository creates a new mock instance.
func NewMockFlourRepository(ctrl *gomock.Controller) *MockFlourRepository {
	mock := &MockFlourRepository{ctrl: ctrl}
	mock.recorder = &MockFlourRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlourRepository) EXPECT() *MockFlourRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlourRepository) Create(ctx context.Context, flour domain.FlourEntity) (domain.FlourEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, flour)
	ret0, _ := ret[0].(domain.FlourEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlourRepositoryMockRecorder) Create(ctx, flour any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlourRepository)(nil).Create), ctx, flour)
}

// Find mocks base method.
func (m *MockFlourRepository) Find(ctx context.Context, offset, limit int) ([]domain.FlourEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.FlourEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFlourRepositoryMockRecorder) Find(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFlourRepository)(nil).Find), ctx, offset, limit)
}

// FindById mocks base method.
func (m *MockFlourRepository) FindById(ctx context.Context, id uuid.UUID) (domain.FlourEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.FlourEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFlourRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFlourRepository)(nil).FindById), ctx, id)
}

// SearchByName mocks base method.
func (m *MockFlourRepository) SearchByName(ctx context.Context, name string) ([]domain.FlourEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]domain.FlourEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockFlourRepositoryMockRecorder) SearchByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockFlourRepository)(nil).SearchByName), ctx, name)
}

// MockFlourService is a mock of FlourService interface.
type MockFlourService struct {
	ctrl     *gomock.Controller
	recorder *MockFlourServiceMockRecorder
}

// MockFlourServiceMockRecorder is the mock recorder for MockFlourService.
type MockFlourServiceMockRecorder struct {
	mock *MockFlourService
}

// NewMockFlourService creates a new mock instance.
func NewMockFlourService(ctrl *gomock.Controller) *MockFlourService {
	mock := &MockFlourService{ctrl: ctrl}
	mock.recorder = &MockFlourServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlourService) EXPECT() *MockFlourServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlourService) Create(ctx context.Context, request domain.CreateFlourRequest) (domain.FlourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(domain.FlourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlourServiceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlourService)(nil).Create), ctx, request)
}

// Find mocks base method.
func (m *MockFlourService) Find(ctx context.Context, offset, limit int) ([]domain.FlourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.FlourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFlourServiceMockRecorder) Find(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFlourService)(nil).Find), ctx, offset, limit)
}

// FindById mocks base method.
func (m *MockFlourService) FindById(ctx context.Context, id uuid.UUID) (domain.FlourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.FlourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFlourServiceMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFlourService)(nil).FindById), ctx, id)
}

// SearchByName mocks base method.
func (m *MockFlourService) SearchByName(ctx context.Context, name string) ([]domain.FlourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]domain.FlourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockFlourServiceMockRecorder) SearchByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockFlourService)(nil).SearchByName), ctx, name)
}

// MockFlourHandler is a mock of FlourHandler interface.
type MockFlourHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFlourHandlerMockRecorder
}

// MockFlourHandlerMockRecorder is the mock recorder for MockFlourHandler.
type MockFlourHandlerMockRecorder struct {
	mock *MockFlourHandler
}

// NewMockFlourHandler creates a new mock instance.
func NewMockFlourHandler(ctrl *gomock.Controller) *MockFlourHandler {
	mock := &MockFlourHandler{ctrl: ctrl}
	mock.recorder = &MockFlourHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlourHandler) EXPECT() *MockFlourHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlourHandler) Create() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFlourHandlerMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlourHandler)(nil).Create))
}

// Find mocks base method.
func (m *MockFlourHandler) Find() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockFlourHandlerMockRecorder) Find() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFlourHandler)(nil).Find))
}

// FindById mocks base method.
func (m *MockFlourHandler) FindById() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockFlourHandlerMockRecorder) FindById() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFlourHandler)(nil).FindById))
}

// Search mocks base method.
func (m *MockFlourHandler) Search() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockFlourHandlerMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFlourHandler)(nil).Search))
}
