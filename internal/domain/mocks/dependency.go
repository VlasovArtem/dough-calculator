// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -source=dependency.go -destination=mocks/dependency.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "dough-calculator/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDependencyInitializer is a mock of DependencyInitializer interface.
type MockDependencyInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyInitializerMockRecorder
}

// MockDependencyInitializerMockRecorder is the mock recorder for MockDependencyInitializer.
type MockDependencyInitializerMockRecorder struct {
	mock *MockDependencyInitializer
}

// NewMockDependencyInitializer creates a new mock instance.
func NewMockDependencyInitializer(ctrl *gomock.Controller) *MockDependencyInitializer {
	mock := &MockDependencyInitializer{ctrl: ctrl}
	mock.recorder = &MockDependencyInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyInitializer) EXPECT() *MockDependencyInitializerMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockDependencyInitializer) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDependencyInitializerMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDependencyInitializer)(nil).Initialize), ctx)
}

// MockDependencyManager is a mock of DependencyManager interface.
type MockDependencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyManagerMockRecorder
}

// MockDependencyManagerMockRecorder is the mock recorder for MockDependencyManager.
type MockDependencyManagerMockRecorder struct {
	mock *MockDependencyManager
}

// NewMockDependencyManager creates a new mock instance.
func NewMockDependencyManager(ctrl *gomock.Controller) *MockDependencyManager {
	mock := &MockDependencyManager{ctrl: ctrl}
	mock.recorder = &MockDependencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyManager) EXPECT() *MockDependencyManagerMockRecorder {
	return m.recorder
}

// Common mocks base method.
func (m *MockDependencyManager) Common() domain.CommonDependencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Common")
	ret0, _ := ret[0].(domain.CommonDependencyService)
	return ret0
}

// Common indicates an expected call of Common.
func (mr *MockDependencyManagerMockRecorder) Common() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Common", reflect.TypeOf((*MockDependencyManager)(nil).Common))
}

// Flour mocks base method.
func (m *MockDependencyManager) Flour() domain.FlourDependencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flour")
	ret0, _ := ret[0].(domain.FlourDependencyService)
	return ret0
}

// Flour indicates an expected call of Flour.
func (mr *MockDependencyManagerMockRecorder) Flour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flour", reflect.TypeOf((*MockDependencyManager)(nil).Flour))
}

// Initialize mocks base method.
func (m *MockDependencyManager) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDependencyManagerMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDependencyManager)(nil).Initialize), ctx)
}

// SourdoughRecipe mocks base method.
func (m *MockDependencyManager) SourdoughRecipe() domain.SourdoughRecipeDependencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourdoughRecipe")
	ret0, _ := ret[0].(domain.SourdoughRecipeDependencyService)
	return ret0
}

// SourdoughRecipe indicates an expected call of SourdoughRecipe.
func (mr *MockDependencyManagerMockRecorder) SourdoughRecipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourdoughRecipe", reflect.TypeOf((*MockDependencyManager)(nil).SourdoughRecipe))
}

// SourdoughRecipeScale mocks base method.
func (m *MockDependencyManager) SourdoughRecipeScale() domain.SourdoughRecipeScaleDependencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourdoughRecipeScale")
	ret0, _ := ret[0].(domain.SourdoughRecipeScaleDependencyService)
	return ret0
}

// SourdoughRecipeScale indicates an expected call of SourdoughRecipeScale.
func (mr *MockDependencyManagerMockRecorder) SourdoughRecipeScale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourdoughRecipeScale", reflect.TypeOf((*MockDependencyManager)(nil).SourdoughRecipeScale))
}

// MockSourdoughRecipeDependencyService is a mock of SourdoughRecipeDependencyService interface.
type MockSourdoughRecipeDependencyService struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeDependencyServiceMockRecorder
}

// MockSourdoughRecipeDependencyServiceMockRecorder is the mock recorder for MockSourdoughRecipeDependencyService.
type MockSourdoughRecipeDependencyServiceMockRecorder struct {
	mock *MockSourdoughRecipeDependencyService
}

// NewMockSourdoughRecipeDependencyService creates a new mock instance.
func NewMockSourdoughRecipeDependencyService(ctrl *gomock.Controller) *MockSourdoughRecipeDependencyService {
	mock := &MockSourdoughRecipeDependencyService{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeDependencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeDependencyService) EXPECT() *MockSourdoughRecipeDependencyServiceMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockSourdoughRecipeDependencyService) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockSourdoughRecipeDependencyServiceMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockSourdoughRecipeDependencyService)(nil).Initialize), ctx)
}

// Repository mocks base method.
func (m *MockSourdoughRecipeDependencyService) Repository() domain.SourdoughRecipeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(domain.SourdoughRecipeRepository)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockSourdoughRecipeDependencyServiceMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockSourdoughRecipeDependencyService)(nil).Repository))
}

// Router mocks base method.
func (m *MockSourdoughRecipeDependencyService) Router() domain.SourdoughRecipeHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(domain.SourdoughRecipeHandler)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockSourdoughRecipeDependencyServiceMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockSourdoughRecipeDependencyService)(nil).Router))
}

// Service mocks base method.
func (m *MockSourdoughRecipeDependencyService) Service() domain.SourdoughRecipeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(domain.SourdoughRecipeService)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockSourdoughRecipeDependencyServiceMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockSourdoughRecipeDependencyService)(nil).Service))
}

// MockSourdoughRecipeScaleDependencyService is a mock of SourdoughRecipeScaleDependencyService interface.
type MockSourdoughRecipeScaleDependencyService struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeScaleDependencyServiceMockRecorder
}

// MockSourdoughRecipeScaleDependencyServiceMockRecorder is the mock recorder for MockSourdoughRecipeScaleDependencyService.
type MockSourdoughRecipeScaleDependencyServiceMockRecorder struct {
	mock *MockSourdoughRecipeScaleDependencyService
}

// NewMockSourdoughRecipeScaleDependencyService creates a new mock instance.
func NewMockSourdoughRecipeScaleDependencyService(ctrl *gomock.Controller) *MockSourdoughRecipeScaleDependencyService {
	mock := &MockSourdoughRecipeScaleDependencyService{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeScaleDependencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeScaleDependencyService) EXPECT() *MockSourdoughRecipeScaleDependencyServiceMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockSourdoughRecipeScaleDependencyService) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockSourdoughRecipeScaleDependencyServiceMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockSourdoughRecipeScaleDependencyService)(nil).Initialize), ctx)
}

// Router mocks base method.
func (m *MockSourdoughRecipeScaleDependencyService) Router() domain.SourdoughRecipeScaleHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(domain.SourdoughRecipeScaleHandler)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockSourdoughRecipeScaleDependencyServiceMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockSourdoughRecipeScaleDependencyService)(nil).Router))
}

// Service mocks base method.
func (m *MockSourdoughRecipeScaleDependencyService) Service() domain.SourdoughRecipeScaleService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(domain.SourdoughRecipeScaleService)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockSourdoughRecipeScaleDependencyServiceMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockSourdoughRecipeScaleDependencyService)(nil).Service))
}

// MockCommonDependencyService is a mock of CommonDependencyService interface.
type MockCommonDependencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCommonDependencyServiceMockRecorder
}

// MockCommonDependencyServiceMockRecorder is the mock recorder for MockCommonDependencyService.
type MockCommonDependencyServiceMockRecorder struct {
	mock *MockCommonDependencyService
}

// NewMockCommonDependencyService creates a new mock instance.
func NewMockCommonDependencyService(ctrl *gomock.Controller) *MockCommonDependencyService {
	mock := &MockCommonDependencyService{ctrl: ctrl}
	mock.recorder = &MockCommonDependencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonDependencyService) EXPECT() *MockCommonDependencyServiceMockRecorder {
	return m.recorder
}

// Actuator mocks base method.
func (m *MockCommonDependencyService) Actuator() domain.ActuatorHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actuator")
	ret0, _ := ret[0].(domain.ActuatorHandler)
	return ret0
}

// Actuator indicates an expected call of Actuator.
func (mr *MockCommonDependencyServiceMockRecorder) Actuator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actuator", reflect.TypeOf((*MockCommonDependencyService)(nil).Actuator))
}

// ConfigManager mocks base method.
func (m *MockCommonDependencyService) ConfigManager() domain.ConfigManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigManager")
	ret0, _ := ret[0].(domain.ConfigManager)
	return ret0
}

// ConfigManager indicates an expected call of ConfigManager.
func (mr *MockCommonDependencyServiceMockRecorder) ConfigManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigManager", reflect.TypeOf((*MockCommonDependencyService)(nil).ConfigManager))
}

// Initialize mocks base method.
func (m *MockCommonDependencyService) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockCommonDependencyServiceMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCommonDependencyService)(nil).Initialize), ctx)
}

// MongoDBService mocks base method.
func (m *MockCommonDependencyService) MongoDBService() domain.MongoDBService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoDBService")
	ret0, _ := ret[0].(domain.MongoDBService)
	return ret0
}

// MongoDBService indicates an expected call of MongoDBService.
func (mr *MockCommonDependencyServiceMockRecorder) MongoDBService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoDBService", reflect.TypeOf((*MockCommonDependencyService)(nil).MongoDBService))
}

// MockFlourDependencyService is a mock of FlourDependencyService interface.
type MockFlourDependencyService struct {
	ctrl     *gomock.Controller
	recorder *MockFlourDependencyServiceMockRecorder
}

// MockFlourDependencyServiceMockRecorder is the mock recorder for MockFlourDependencyService.
type MockFlourDependencyServiceMockRecorder struct {
	mock *MockFlourDependencyService
}

// NewMockFlourDependencyService creates a new mock instance.
func NewMockFlourDependencyService(ctrl *gomock.Controller) *MockFlourDependencyService {
	mock := &MockFlourDependencyService{ctrl: ctrl}
	mock.recorder = &MockFlourDependencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlourDependencyService) EXPECT() *MockFlourDependencyServiceMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockFlourDependencyService) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockFlourDependencyServiceMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockFlourDependencyService)(nil).Initialize), ctx)
}

// Repository mocks base method.
func (m *MockFlourDependencyService) Repository() domain.FlourRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(domain.FlourRepository)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockFlourDependencyServiceMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockFlourDependencyService)(nil).Repository))
}

// Router mocks base method.
func (m *MockFlourDependencyService) Router() domain.FlourHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(domain.FlourHandler)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockFlourDependencyServiceMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockFlourDependencyService)(nil).Router))
}

// Service mocks base method.
func (m *MockFlourDependencyService) Service() domain.FlourService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(domain.FlourService)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockFlourDependencyServiceMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockFlourDependencyService)(nil).Service))
}
