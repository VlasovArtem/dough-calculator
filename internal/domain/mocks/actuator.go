// Code generated by MockGen. DO NOT EDIT.
// Source: actuator.go
//
// Generated by this command:
//
//	mockgen -source=actuator.go -destination mocks/actuator.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockActuatorHandler is a mock of ActuatorHandler interface.
type MockActuatorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActuatorHandlerMockRecorder
}

// MockActuatorHandlerMockRecorder is the mock recorder for MockActuatorHandler.
type MockActuatorHandlerMockRecorder struct {
	mock *MockActuatorHandler
}

// NewMockActuatorHandler creates a new mock instance.
func NewMockActuatorHandler(ctrl *gomock.Controller) *MockActuatorHandler {
	mock := &MockActuatorHandler{ctrl: ctrl}
	mock.recorder = &MockActuatorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActuatorHandler) EXPECT() *MockActuatorHandlerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockActuatorHandler) Health() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockActuatorHandlerMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockActuatorHandler)(nil).Health))
}
