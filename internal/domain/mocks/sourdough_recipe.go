// Code generated by MockGen. DO NOT EDIT.
// Source: sourdough_recipe.go
//
// Generated by this command:
//
//	mockgen -source=sourdough_recipe.go -destination=mocks/sourdough_recipe.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "dough-calculator/internal/domain"
	http "net/http"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSourdoughRecipeRepository is a mock of SourdoughRecipeRepository interface.
type MockSourdoughRecipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeRepositoryMockRecorder
}

// MockSourdoughRecipeRepositoryMockRecorder is the mock recorder for MockSourdoughRecipeRepository.
type MockSourdoughRecipeRepositoryMockRecorder struct {
	mock *MockSourdoughRecipeRepository
}

// NewMockSourdoughRecipeRepository creates a new mock instance.
func NewMockSourdoughRecipeRepository(ctrl *gomock.Controller) *MockSourdoughRecipeRepository {
	mock := &MockSourdoughRecipeRepository{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeRepository) EXPECT() *MockSourdoughRecipeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSourdoughRecipeRepository) Create(ctx context.Context, recipe domain.SourdoughRecipeEntity) (domain.SourdoughRecipeEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, recipe)
	ret0, _ := ret[0].(domain.SourdoughRecipeEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSourdoughRecipeRepositoryMockRecorder) Create(ctx, recipe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourdoughRecipeRepository)(nil).Create), ctx, recipe)
}

// Find mocks base method.
func (m *MockSourdoughRecipeRepository) Find(ctx context.Context, offset, limit int) ([]domain.SourdoughRecipeEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.SourdoughRecipeEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSourdoughRecipeRepositoryMockRecorder) Find(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSourdoughRecipeRepository)(nil).Find), ctx, offset, limit)
}

// GetById mocks base method.
func (m *MockSourdoughRecipeRepository) GetById(ctx context.Context, id uuid.UUID) (domain.SourdoughRecipeEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.SourdoughRecipeEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockSourdoughRecipeRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockSourdoughRecipeRepository)(nil).GetById), ctx, id)
}

// SearchByName mocks base method.
func (m *MockSourdoughRecipeRepository) SearchByName(ctx context.Context, name string) ([]domain.SourdoughRecipeEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]domain.SourdoughRecipeEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockSourdoughRecipeRepositoryMockRecorder) SearchByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockSourdoughRecipeRepository)(nil).SearchByName), ctx, name)
}

// MockSourdoughRecipeService is a mock of SourdoughRecipeService interface.
type MockSourdoughRecipeService struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeServiceMockRecorder
}

// MockSourdoughRecipeServiceMockRecorder is the mock recorder for MockSourdoughRecipeService.
type MockSourdoughRecipeServiceMockRecorder struct {
	mock *MockSourdoughRecipeService
}

// NewMockSourdoughRecipeService creates a new mock instance.
func NewMockSourdoughRecipeService(ctrl *gomock.Controller) *MockSourdoughRecipeService {
	mock := &MockSourdoughRecipeService{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeService) EXPECT() *MockSourdoughRecipeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSourdoughRecipeService) Create(ctx context.Context, request domain.CreateSourdoughRecipeRequest) (domain.SourdoughRecipeDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(domain.SourdoughRecipeDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSourdoughRecipeServiceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourdoughRecipeService)(nil).Create), ctx, request)
}

// Find mocks base method.
func (m *MockSourdoughRecipeService) Find(ctx context.Context, offset, limit int) ([]domain.SourdoughRecipeDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.SourdoughRecipeDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSourdoughRecipeServiceMockRecorder) Find(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSourdoughRecipeService)(nil).Find), ctx, offset, limit)
}

// FindById mocks base method.
func (m *MockSourdoughRecipeService) FindById(ctx context.Context, id uuid.UUID) (domain.SourdoughRecipeDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.SourdoughRecipeDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSourdoughRecipeServiceMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSourdoughRecipeService)(nil).FindById), ctx, id)
}

// SearchByName mocks base method.
func (m *MockSourdoughRecipeService) SearchByName(ctx context.Context, name string) ([]domain.SourdoughRecipeDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]domain.SourdoughRecipeDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockSourdoughRecipeServiceMockRecorder) SearchByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockSourdoughRecipeService)(nil).SearchByName), ctx, name)
}

// MockSourdoughRecipeScaleService is a mock of SourdoughRecipeScaleService interface.
type MockSourdoughRecipeScaleService struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeScaleServiceMockRecorder
}

// MockSourdoughRecipeScaleServiceMockRecorder is the mock recorder for MockSourdoughRecipeScaleService.
type MockSourdoughRecipeScaleServiceMockRecorder struct {
	mock *MockSourdoughRecipeScaleService
}

// NewMockSourdoughRecipeScaleService creates a new mock instance.
func NewMockSourdoughRecipeScaleService(ctrl *gomock.Controller) *MockSourdoughRecipeScaleService {
	mock := &MockSourdoughRecipeScaleService{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeScaleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeScaleService) EXPECT() *MockSourdoughRecipeScaleServiceMockRecorder {
	return m.recorder
}

// Scale mocks base method.
func (m *MockSourdoughRecipeScaleService) Scale(ctx context.Context, id uuid.UUID, request domain.SourdoughRecipeScaleRequestDto) (domain.SourdoughRecipeDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", ctx, id, request)
	ret0, _ := ret[0].(domain.SourdoughRecipeDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scale indicates an expected call of Scale.
func (mr *MockSourdoughRecipeScaleServiceMockRecorder) Scale(ctx, id, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockSourdoughRecipeScaleService)(nil).Scale), ctx, id, request)
}

// MockSourdoughRecipeHandler is a mock of SourdoughRecipeHandler interface.
type MockSourdoughRecipeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeHandlerMockRecorder
}

// MockSourdoughRecipeHandlerMockRecorder is the mock recorder for MockSourdoughRecipeHandler.
type MockSourdoughRecipeHandlerMockRecorder struct {
	mock *MockSourdoughRecipeHandler
}

// NewMockSourdoughRecipeHandler creates a new mock instance.
func NewMockSourdoughRecipeHandler(ctrl *gomock.Controller) *MockSourdoughRecipeHandler {
	mock := &MockSourdoughRecipeHandler{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeHandler) EXPECT() *MockSourdoughRecipeHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSourdoughRecipeHandler) Create() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSourdoughRecipeHandlerMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourdoughRecipeHandler)(nil).Create))
}

// Find mocks base method.
func (m *MockSourdoughRecipeHandler) Find() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockSourdoughRecipeHandlerMockRecorder) Find() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSourdoughRecipeHandler)(nil).Find))
}

// FindById mocks base method.
func (m *MockSourdoughRecipeHandler) FindById() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockSourdoughRecipeHandlerMockRecorder) FindById() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSourdoughRecipeHandler)(nil).FindById))
}

// Search mocks base method.
func (m *MockSourdoughRecipeHandler) Search() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockSourdoughRecipeHandlerMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSourdoughRecipeHandler)(nil).Search))
}

// MockSourdoughRecipeScaleHandler is a mock of SourdoughRecipeScaleHandler interface.
type MockSourdoughRecipeScaleHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSourdoughRecipeScaleHandlerMockRecorder
}

// MockSourdoughRecipeScaleHandlerMockRecorder is the mock recorder for MockSourdoughRecipeScaleHandler.
type MockSourdoughRecipeScaleHandlerMockRecorder struct {
	mock *MockSourdoughRecipeScaleHandler
}

// NewMockSourdoughRecipeScaleHandler creates a new mock instance.
func NewMockSourdoughRecipeScaleHandler(ctrl *gomock.Controller) *MockSourdoughRecipeScaleHandler {
	mock := &MockSourdoughRecipeScaleHandler{ctrl: ctrl}
	mock.recorder = &MockSourdoughRecipeScaleHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourdoughRecipeScaleHandler) EXPECT() *MockSourdoughRecipeScaleHandlerMockRecorder {
	return m.recorder
}

// Scale mocks base method.
func (m *MockSourdoughRecipeScaleHandler) Scale() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Scale indicates an expected call of Scale.
func (mr *MockSourdoughRecipeScaleHandlerMockRecorder) Scale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockSourdoughRecipeScaleHandler)(nil).Scale))
}
