// Code generated by MockGen. DO NOT EDIT.
// Source: config_manager.go
//
// Generated by this command:
//
//	mockgen -source=config_manager.go -destination=mocks/config_manager.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	config "dough-calculator/internal/config"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigManager) GetConfig() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigManagerMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigManager)(nil).GetConfig))
}

// ParseConfig mocks base method.
func (m *MockConfigManager) ParseConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseConfig indicates an expected call of ParseConfig.
func (mr *MockConfigManagerMockRecorder) ParseConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConfig", reflect.TypeOf((*MockConfigManager)(nil).ParseConfig))
}
